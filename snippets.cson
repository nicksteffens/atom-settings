# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#

# Javascript
'.source.js':
  'Console log':
    'prefix': 'log'
    'body': 'console.log($1);'

  'Debugger':
    'prefix': 'debug'
    'body': 'debugger;'


# TESTING STUFF FOR QUNIT
  'PauseTest':
    'prefix': 'pauseTest'
    'body': 'return this.pauseTest();'

  'AndThen':
    'prefix': 'andThen'
    'body': """
      andThen(function() {
        assert.equal($1)
      });
    """

  'StopTest':
    'prefix': 'stop'
    'body': 'assert.async();'

  'test async':
    'prefix': 'test'
    'body': """
      test('$1', async function(assert) {
        $2
      });
    """
  'test sync':
    'prefix': 'test sync'
    'body': """
      test('$1',function(assert) {
        $2
      });
    """
  'authenticateSession':
    'prefix': 'authenticateSession'
    'body': """
      const dashboardUser = server.create('dashboardUser');
      authenticateSession({ userId: dashboardUser.id });
    """
  'percySnapshot':
    'prefix': 'percySnapshot'
    'body': """
      percySnapshot(assert);
    """
  'import percySnapshot':
    'prefix': 'import percy'
    'body': """
      import { percySnapshot } from 'ember-percy';
    """
  'import EventTrackingMixin':
    'prefix': 'import EventTrackingMixin'
    'body': """
      import EventTrackingMixin from 'agency-web-app/mixins/event-tracking';
    """
  # Ember
  'import authenticateSession':
    'prefix': 'import authenticateSession'
    'body': """
      import { authenticateSession } from 'ember-simple-auth/test-support';
    """
  'import EmberObject':
    'prefix': 'import EmberObject'
    'body': """
      import EmberObject from '@ember/object';
    """
  'import computed':
    'prefix': 'import computed'
    'body': """
      import { computed } from '@ember/object';
    """
  'import computed property':
    'prefix': 'import computed_function'
    'body': """
      import { ${1:readOnly} } from '@ember/object/computed';
    """
  'import setupMirage':
    'prefix': 'import setupMirage'
    'body': """
      import setupMirage from 'ember-cli-mirage/test-support/setup-mirage';
    """
  'import helpers':
    'prefix': 'import test-helpers'
    'body': """
      import { visit } from '@ember/test-helpers';
    """
  'setupMirage':
    'prefix': 'setupMirage'
    'body': """
      setupMirage(hooks);
    """
  'Run':
    'prefix': 'run'
    'body': """
      Ember.run(()=> {
        $1
      });
    """
  'Find':
    'prefix': 'find'
    'body':"""
      find('[data-test-${1:role}]')
    """
  # Assert Helpers
  'assert ok':
    'prefix': 'ok'
    'body': """
      assert.ok(${1:false});
    """
  'assert notOk':
    'prefix': 'notOk'
    'body': """
      assert.notOk(${1:true});
    """
  'assert equal':
    'prefix': 'equal'
    'body': """
      assert.equal(
        ${1:_something_},
        ${2:999},
        '${3:description_of_assertion}'
      );
    """
  'assert.deepEqual':
    'prefix': 'deepEqual'
    'body': """
      assert.deepEqual(
        ${1:_something_},
        [
          ${2:''}
        ],
        '${3:description_of_assertion}'
      )
    """
  # Assert DOM Helpers
  'assert.dom':
    'prefix': 'dom'
    'body': """
      assert.dom('${1:selector}')$2
    """
  'assert.exists':
    'prefix': 'exists'
    'body': """
      exists({ count: $1 });
    """
  'assert.doesNotExist':
    'prefix': 'doesNotExist'
    'body': """
      doesNotExist();
    """
  # Module Unifications
  'module.unification.acceptance':
    'prefix': 'uni acceptance'
    'body': """
      import { authenticateSession } from 'ember-simple-auth/test-support';
      import setupMirage from 'ember-cli-mirage/test-support/setup-mirage';
      import { visit } from '@ember/test-helpers';
    """
# Handlbars
'.text.html.handlebars':
  'data-role':
    'prefix': 'dr'
    'body': 'data-role="$1"'

  'data-test':
    'prefix': 'dt'
    'body': 'data-test-$1"'

  'modal-container':
    'prefix': 'modal-container'
    'body': """
      {{#modal/modal-container
        buttonClass="$1"
        as |hideModal|}}
        $2
      {{/modal/modal-container}}
    """

  'modal-content':
    'prefix': 'modal-content'
    'body': """
      {{#modal/modal-content}}
        $1
      {{/modal/modal-content}}
    """

  'modal-footer':
    'prefix': 'modal-footer'
    'body': """
      {{#modal/modal-footer}}
        <button
          class="button__text"
          data-role="$1"
          {{action "cancel"}}>
          ${2:Cancel}
        </button>

        <button
          class="btn"
          disabled={{${3:isSaveDisabled}}}
          data-role="$4"
          {{action "save"}}>
          ${5:Save}
        </button>
      {{/modal/modal-footer}}
    """

  'section-heading':
    'prefix': 'section-heading'
    'body': """
      {{section-heading
        type="${1:primary}"
        title="$2"}}
    """
  'readonly':
    'prefix': 'readonly'
    'body': """
      <div class="col s${1:4} readonly-field readonly-field--borderless">
        <p>${2:_label_text_}</p>
        <p data-role="${3:_data_role_}">${4}</p>
      </div>
    """
  'form-input':
    'prefix': 'form-input'
    'body': """
      <div class="col s${1:3}">
        <label class="active">${2:_label_}</label>
        {{input
          value=${3:_value_}
          data-role="${4:_data_role_}"}}
        {{validation-error message=errors.${5:model.property}}}
      </div>
    """
# Git
'.text.git-commit':
  'message':
    'prefix': 'gca'
    'body': """
      ${1:Commit Title}

      Why
      ---
      - ${2:Why the change(s) where needed?}

      This PR:
      ---
      - ${3:What was added to address the why(s)}

      [Trello](${4:hyperlink})
    """

# SASS
'.source.css.scss':
  'Media Query Percy':
    'prefix': 'media-percy'
    'body': """
      @media only percy {
        $1
      }
    """
  # 'Media Query Small Only':
  #   'prefix': 'med-s'
  #   'body': """
  #     @media screen and ( max-width: $media-s-max) {
  #       $1
  #     }
  #   """
  # 'Media Query Media Only':
  #   'prefix': 'med-m'
  #   'body': """
  #     @media screen and ( min-width: $media-m-min ) and ( max-width: $media-m-max ) {
  #       $1
  #     }
  #   """
  # 'Media Query Large Only':
  #   'prefix': 'med-l'
  #   'body': """
  #     @media screen and ( min-width: $media-l-min ) and ( max-width: $media-l-max) {
  #       $1
  #     }
  #   """
  # 'Media Query Dell Crap':
  #   'prefix': 'mediadell'
  #   'body': """
  #     @media screen and ( min-height: $media-dell-min-height ) and ( max-height: $media-dell-max-height) and ( min-width: $media-xl-min ) {
  #       $1
  #     }
  #   """

# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it here:
# https://github.com/bevry/cson#what-is-cson

# EMMET
"handlebars": {
    "extends": "html"
    "profile": "handlebars"
    "filters": "html"
}
"javascript": {
    "extends": "js"
    "profile": "javascript"
    "filters": "js"
}
